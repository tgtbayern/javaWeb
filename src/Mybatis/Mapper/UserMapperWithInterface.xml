<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    MyBatis 映射器（Mapper）XML 文件，用于定义 SQL 映射配置。
    映射器文件通常用于将数据库操作与 Java 方法关联起来。
-->

    <!-- 定义映射器命名空间，通常与对应的 Java 接口或类的全限定名一致
    全限定名唯一标识了这个接口在Java代码中（不是计算机的路径）的位置-->
<mapper namespace="Mybatis.Mapper.UserMapper">

    <!--
        namespace是这个mapper配置文件的名字，这里我们通过namespace属性把这个mapper和UserMapper接口对应
        这样当我们调用接口中的抽象方法时，myBatis就知道通过这个mapper里的配置文件，来实现那个抽象方法

        id指的是“select * from user”这条语句的名字，起了这个名字后，我们就可以在后面的java代码里用这个名字指代这条sql语句
        这里我们已经将这个mapper和接口对应，接口里会有一个名叫selectUser的抽象方法
        当调用selectUser方法时，myBatis会通过namespace找到这个mapper
        再通过id来找到调用的这个selectUser方法具体对应这个mapper里的哪一部分语句

        resultType是需要映射成的类型的位置（不是电脑里的路径，是在java里的位置，哪个包（也可能不在包里，看你自己），哪个类）
        在这个例子里User是类名，Mybatis是User类所在的包名，这个地方每个人不一样，根据你的类的位置来决定。
    -->

    <select id="selectUser" resultType="User">
        select * from accounting_ledger.user
    </select>
    <!--
        与这个方法对应的接口会传入一个username，mybatis会将这个参数传入#{username}
    -->
    <select id="selectByUsername" resultType="User">
        select * from accounting_ledger.user where username = #{username}
    </select>

    <insert id="insertUser">
        insert into accounting_ledger.user(username, password) VALUES (#{username},#{password})
    </insert>

</mapper>
